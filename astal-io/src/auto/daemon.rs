// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-astal
// from ../gir-files
// DO NOT EDIT

use crate::{ffi,Application};
use glib::{prelude::*,translate::*};

#[cfg(feature = "gio_v2_28")]
#[cfg_attr(docsrs, doc(cfg(feature = "gio_v2_28")))]
glib::wrapper! {
    #[doc(alias = "AstalIODaemon")]
    pub struct Daemon(Object<ffi::AstalIODaemon, ffi::AstalIODaemonClass>) @extends gio::Application, @implements gio::ActionGroup, gio::ActionMap, Application;

    match fn {
        type_ => || ffi::astal_io_daemon_get_type(),
    }
}

#[cfg(not(any(feature = "gio_v2_28")))]
#[cfg(feature = "gio_v2_32")]
glib::wrapper! {
    #[doc(alias = "AstalIODaemon")]
    pub struct Daemon(Object<ffi::AstalIODaemon, ffi::AstalIODaemonClass>) @implements gio::ActionGroup, gio::ActionMap, Application;

    match fn {
        type_ => || ffi::astal_io_daemon_get_type(),
    }
}

#[cfg(not(any(feature = "gio_v2_32")))]
glib::wrapper! {
    #[doc(alias = "AstalIODaemon")]
    pub struct Daemon(Object<ffi::AstalIODaemon, ffi::AstalIODaemonClass>) @implements gio::ActionGroup, Application;

    match fn {
        type_ => || ffi::astal_io_daemon_get_type(),
    }
}

impl Daemon {
        pub const NONE: Option<&'static Daemon> = None;
    

    #[doc(alias = "astal_io_daemon_new")]
    pub fn new() -> Daemon {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::astal_io_daemon_new())
        }
    }
}

impl Default for Daemon {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Daemon>> Sealed for T {}
}

pub trait DaemonExt: IsA<Daemon> + sealed::Sealed + 'static {
    #[doc(alias = "astal_io_daemon_request")]
    fn request(&self, msg: &str, conn: &impl IsA<gio::SocketConnection>) {
        unsafe {
            ffi::astal_io_daemon_request(self.as_ref().to_glib_none().0, msg.to_glib_none().0, conn.as_ref().to_glib_none().0);
        }
    }
}

impl<O: IsA<Daemon>> DaemonExt for O {}
